{"version":3,"sources":["components/ProgressBar/ProgressBar.js","components/ProgressBar/index.js","components/TextInput/TextInput.js","components/TextInput/index.js","components/Label/Label.js","components/Label/index.js","components/PasswordInput/PasswordInput.js","components/PasswordInput/index.js","components/EyeIcon/EyeIcon.js","components/EyeIcon/index.js","../config/componentData.js","docs/examples/EyeIcon/Example.js","docs/examples/Label/ExampleOptional.js","docs/examples/Label/ExampleRequired.js","docs/examples/PasswordInput/ExampleAllFeatures.js","docs/examples/PasswordInput/ExampleWithOutEye.js","docs/examples/ProgressBar/Example100Percent.js","docs/examples/ProgressBar/Example10Percent.js","docs/examples/ProgressBar/Example70Percent.js","docs/examples/TextInput/ExampleError.js","docs/examples/TextInput/ExampleOptional.js","components/HelloWorld/HelloWorld.js","docs/examples/HelloWorld/ExampleHelloWorld.js","components/RegistrationForm/RegistrationForm.js","docs/examples/RegistrationForm/ExampleRegistrationForm.js","docs/examples sync /^/.*$","docs/Navigation.js","docs/CodeExample.js","docs/Example.js","docs/Props.js","docs/ComponentPage.js","docs/Docs.js","index.js","registerServiceWorker.js"],"names":["ProgressBar","getColor","percent","props","getWidthAsPercentOfTotalWidth","parseInt","width","this","height","style","border","backgroundColor","React","Component","defaultProps","TextInput","htmlId","name","label","type","required","onChange","placeholder","value","error","children","marginBottom","Label","htmlFor","id","className","color","display","PasswordInput","toggleShowPassword","event","setState","prevState","showPassword","preventDefault","state","maxLength","showVisibilityToggle","quality","href","onClick","marginLeft","EyeIcon","length","xmlns","viewBox","transform","fill","d","cx","cy","r","module","exports","EyeIconExample","ExampleOptional","ExampleRequred","ExampleAllFeatures","password","target","minLength","getQuality","ExampleWithOutEye","Example100Percent","Example10Percent","Example70Percent","ExampleError","HelloWorld","message","ExampleHelloWorld","RegistrationForm","user","onSubmit","validate","submitedd","email","errors","submitted","minPasswordLength","Object","getOwnPropertyNames","confirmationMessage","passwordQuality","Submit","ExampleRegistrationForm","console","log","map","webpackContext","req","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","resolve","Navigation","components","key","CodeExample","hljs","registerLanguage","javascript","highlightBlock","element","ref","Example","toggleCode","showCode","example","description","ExampleComponent","require","componentName","default","Props","defaultValue","ComponentPage","component","examples","Docs","route","window","location","hash","substr","addEventListener","componentData","filter","ReactDOM","render","document","getElementById","navigator","swUrl","process","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch"],"mappings":"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","file":"static/js/main.c8ad3b9c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass ProgressBar extends React.Component {\r\n  getColor = percent => {\r\n    if (this.props.percent === 100) return \"green\";\r\n    return this.props.percent > 50 ? \"lightgreen\" : \"red\";\r\n  };\r\n\r\n  getWidthAsPercentOfTotalWidth = () => {\r\n    return parseInt(this.props.width * (this.props.percent / 100), 10);\r\n  };\r\n\r\n  render() {\r\n    const { percent, width, height } = this.props;\r\n    return (\r\n      <div style={{ border: \"solid 1px lightgray\", width: width }}>\r\n        <div\r\n          style={{\r\n            width: this.getWidthAsPercentOfTotalWidth(),\r\n            height,\r\n            backgroundColor: this.getColor(percent)\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nProgressBar.propTypes = {\r\n  /** Percent of progress completed */\r\n  percent: PropTypes.number.isRequired,\r\n\r\n  /** Bar width */\r\n  width: PropTypes.number.isRequired,\r\n\r\n  /** Bar height */\r\n  height: PropTypes.number\r\n};\r\n\r\nProgressBar.defaultProps = {\r\n  height: 5\r\n};\r\n\r\nexport default ProgressBar;\r\n","export { default } from \"./ProgressBar\";\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Label from '../Label';\r\n\r\nfunction TextInput({htmlId, name, label, type=\"text\", required=false, onChange, placeholder, value, error, children, ...props}) {\r\nreturn (\r\n    <div  style={{marginBottom:16}} >\r\n        <Label htmlFor={htmlId} label={label} required={required} />\r\n        <input \r\n            id={htmlId}\r\n            type={type}\r\n            name={name}\r\n            placeholder={placeholder}\r\n            value={value}\r\n            onChange={onChange}\r\n            style={error && {border:'solid 1px red'}}\r\n            {...props}\r\n        />\r\n        {children}\r\n        {error && <div className=\"error\" style={{color: 'red'}}>{error}</div>}\r\n    </div>\r\n    );\r\n};\r\n\r\nTextInput.propTypes = {\r\n    /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\r\n    htmlId: PropTypes.string.isRequired,\r\n  \r\n    /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\r\n    name: PropTypes.string.isRequired,\r\n  \r\n    /** Input label */\r\n    label: PropTypes.string.isRequired,\r\n  \r\n    /** Input type */\r\n    type: PropTypes.oneOf(['text', 'number', 'password']),\r\n  \r\n    /** Mark label with asterisk if set to true */\r\n    required: PropTypes.bool,\r\n  \r\n    /** Function to call onChange */\r\n    onChange: PropTypes.func.isRequired,\r\n  \r\n    /** Placeholder to display when empty */\r\n    placeholder: PropTypes.string,\r\n  \r\n    /** Value */\r\n    value: PropTypes.any,\r\n  \r\n    /** String to display when error occurs */\r\n    error: PropTypes.string,\r\n  \r\n    /** Child component to display next to the input */\r\n    children: PropTypes.node\r\n  };\r\n  \r\n  export default TextInput;","export {default} from './TextInput';","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n/** Label with required field display, htmlFor, and block styling */\r\n\r\nfunction Label({htmlFor, label, required}){\r\n    return (\r\n        <label style={{display:'block'}} htmlFor = {htmlFor}>\r\n            {label} {required && <span style={{color: 'red'}}>*</span>}\r\n        </label>\r\n    )\r\n}\r\n\r\nLabel.propTypes = {\r\n    /** HTML ID for associated input */\r\n    htmlFor: PropTypes.string.isRequired,\r\n\r\n    /** Label text */\r\n    label: PropTypes.string.isRequired,\r\n\r\n    /** Display asterisk after label if true */\r\n    required: PropTypes.bool\r\n};\r\n\r\nexport default Label;","export {default} from './Label';","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ProgressBar from '../ProgressBar';\r\nimport EyeIcon from '../EyeIcon';\r\nimport TextInput from '../TextInput';\r\n\r\n/** Password input with integrated label, quality tips, and show password toggle. */\r\nclass PasswordInput extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      showPassword: false\r\n    }\r\n  }\r\n\r\n  toggleShowPassword = event => {\r\n    this.setState(prevState => {\r\n      return { showPassword: !prevState.showPassword };\r\n    });\r\n    if (event) event.preventDefault();\r\n  }\r\n\r\n  render() {\r\n    const { htmlId, value, label, error, onChange, placeholder, maxLength, showVisibilityToggle, quality, ...props } = this.props;\r\n    const { showPassword } = this.state;\r\n\r\n    return (\r\n      <TextInput\r\n        htmlId={htmlId}\r\n        label={label}\r\n        placeholder={placeholder}\r\n        type={showPassword ? 'text' : 'password'}\r\n        onChange={onChange}\r\n        value={value}\r\n        maxLength={maxLength}\r\n        error={error}\r\n        required\r\n        {...props}>\r\n        {\r\n          showVisibilityToggle &&\r\n          <a\r\n            href=\"!#\"\r\n            onClick={this.toggleShowPassword}\r\n            style={{ marginLeft: 5 }}>\r\n            <EyeIcon />\r\n          </a>\r\n        }\r\n        {\r\n          value.length > 0 && quality && <ProgressBar percent={quality} width={130} />\r\n        }\r\n      </TextInput>\r\n    );\r\n  }\r\n}\r\n\r\nPasswordInput.propTypes = {\r\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\r\n  htmlId: PropTypes.string.isRequired,\r\n\r\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\r\n  name: PropTypes.string.isRequired,\r\n\r\n  /** Password value */\r\n  value: PropTypes.any,\r\n\r\n  /** Input label */\r\n  label: PropTypes.string,\r\n\r\n  /** Function called when password input value changes */\r\n  onChange: PropTypes.func.isRequired,\r\n\r\n  /** Max password length accepted */\r\n  maxLength: PropTypes.number,\r\n\r\n  /** Placeholder displayed when no password is entered */\r\n  placeholder: PropTypes.string,\r\n\r\n  /** Set to true to show the toggle for displaying the currently entered password */\r\n  showVisibilityToggle: PropTypes.bool,\r\n\r\n  /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\r\n  quality: PropTypes.number,\r\n\r\n  /** Validation error to display */\r\n  error: PropTypes.string\r\n};\r\n\r\nPasswordInput.defaultProps = {\r\n  maxLength: 50,\r\n  showVisibilityToggle: false,\r\n  label: 'Password'\r\n};\r\n\r\nexport default PasswordInput;","export {default} from './PasswordInput';","import React from 'react';\r\n\r\n/** SVG Eye Icon */\r\nfunction EyeIcon() {\r\n    // Attribution: Fabián Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\r\n    return (\r\n      <svg width=\"16\" height=\"16\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 22 22\">\r\n        <g transform=\"matrix(.02146 0 0 .02146 1 1)\" fill=\"#4d4d4d\">\r\n          <path d=\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\" />\r\n          <circle cx=\"466.08\" cy=\"466.02\" r=\"134.5\" />\r\n        </g>\r\n      </svg>\r\n    )\r\n  }\r\n  \r\n  export default EyeIcon;","export {default} from './EyeIcon';","module.exports =\n/* eslint-disable */\n[{\n  \"name\": \"DropZone\",\n  \"description\": \"\",\n  \"code\": \"import React from 'react';\\r\\nimport {DropzoneArea} from 'material-ui-dropzone'; \\r\\n\\r\\nfunction DropZone({onChange}){\\r\\n    return(\\r\\n        <div>\\r\\n            <DropzoneArea \\r\\n                onChange={onChange}\\r\\n            />\\r\\n        </div>\\r\\n    )\\r\\n};\\r\\n\\r\\nexport default DropZone;\",\n  \"examples\": []\n}, {\n  \"name\": \"EyeIcon\",\n  \"description\": \"SVG Eye Icon\",\n  \"code\": \"import React from 'react';\\r\\n\\r\\n/** SVG Eye Icon */\\r\\nfunction EyeIcon() {\\r\\n    // Attribution: Fabián Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\\r\\n    return (\\r\\n      <svg width=\\\"16\\\" height=\\\"16\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 22 22\\\">\\r\\n        <g transform=\\\"matrix(.02146 0 0 .02146 1 1)\\\" fill=\\\"#4d4d4d\\\">\\r\\n          <path d=\\\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\\\" />\\r\\n          <circle cx=\\\"466.08\\\" cy=\\\"466.02\\\" r=\\\"134.5\\\" />\\r\\n        </g>\\r\\n      </svg>\\r\\n    )\\r\\n  }\\r\\n  \\r\\n  export default EyeIcon;\",\n  \"examples\": [{\n    \"name\": \"Example\",\n    \"description\": \"\",\n    \"code\": \"import React from 'react'\\r\\nimport EyeIcon from 'ps-react/EyeIcon'\\r\\n\\r\\nexport default function EyeIconExample()\\r\\n{\\r\\n    return <EyeIcon />;\\r\\n}\"\n  }]\n}, {\n  \"name\": \"HelloWorld\",\n  \"description\": \"A super lame component that says Hello with a custom message.\",\n  \"props\": {\n    \"message\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Message to display\",\n      \"defaultValue\": {\n        \"value\": \"\\\"World\\\"\",\n        \"computed\": false\n      }\n    }\n  },\n  \"code\": \"import React from \\\"react\\\";\\r\\nimport PropTypes from \\\"prop-types\\\";\\r\\n\\r\\n/** A super lame component that says Hello with a custom message. */\\r\\nfunction HelloWorld({ message }) {\\r\\n  return <div>Hello {message}</div>;\\r\\n}\\r\\n\\r\\nHelloWorld.propTypes = {\\r\\n  /** Message to display */\\r\\n  message: PropTypes.string\\r\\n};\\r\\n\\r\\nHelloWorld.defaultProps = {\\r\\n  message: \\\"World\\\"\\r\\n};\\r\\n\\r\\nexport default HelloWorld;\\r\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleHelloWorld\",\n    \"description\": \"Custom message\",\n    \"code\": \"import React from 'react';\\r\\nimport HelloWorld from 'ps-react/HelloWorld';\\r\\n\\r\\n/** Custom message */\\r\\nexport default function ExampleHelloWorld() {\\r\\n  return <HelloWorld message=\\\"Pluralsight viewers!\\\" />\\r\\n}\"\n  }]\n}, {\n  \"name\": \"Label\",\n  \"description\": \"Label with required field display, htmlFor, and block styling\",\n  \"props\": {\n    \"htmlFor\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"HTML ID for associated input\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Label text\"\n    },\n    \"required\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Display asterisk after label if true\"\n    }\n  },\n  \"code\": \"import React from 'react'\\r\\nimport PropTypes from 'prop-types'\\r\\n\\r\\n/** Label with required field display, htmlFor, and block styling */\\r\\n\\r\\nfunction Label({htmlFor, label, required}){\\r\\n    return (\\r\\n        <label style={{display:'block'}} htmlFor = {htmlFor}>\\r\\n            {label} {required && <span style={{color: 'red'}}>*</span>}\\r\\n        </label>\\r\\n    )\\r\\n}\\r\\n\\r\\nLabel.propTypes = {\\r\\n    /** HTML ID for associated input */\\r\\n    htmlFor: PropTypes.string.isRequired,\\r\\n\\r\\n    /** Label text */\\r\\n    label: PropTypes.string.isRequired,\\r\\n\\r\\n    /** Display asterisk after label if true */\\r\\n    required: PropTypes.bool\\r\\n};\\r\\n\\r\\nexport default Label;\",\n  \"examples\": [{\n    \"name\": \"ExampleOptional\",\n    \"description\": \"Optional label\",\n    \"code\": \"import React from 'react';\\r\\nimport Label from 'ps-react/Label';\\r\\n\\r\\n/** Optional label */\\r\\nexport default function ExampleOptional(){\\r\\n    return <Label htmlFor=\\\"test\\\" label=\\\"test\\\" />\\r\\n}\"\n  }, {\n    \"name\": \"ExampleRequired\",\n    \"description\": \"Optional label\",\n    \"code\": \"import React from 'react';\\r\\nimport Label from 'ps-react/Label';\\r\\n\\r\\n/** Optional label */\\r\\nexport default function ExampleRequred(){\\r\\n    return <Label htmlFor=\\\"test\\\" label=\\\"test\\\" required/>\\r\\n}\"\n  }]\n}, {\n  \"name\": \"PasswordInput\",\n  \"description\": \"Password input with integrated label, quality tips, and show password toggle.\",\n  \"props\": {\n    \"htmlId\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input name. Recommend setting this to match object's property so a single change handler can be used by convention.\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"Password value\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Input label\",\n      \"defaultValue\": {\n        \"value\": \"'Password'\",\n        \"computed\": false\n      }\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Function called when password input value changes\"\n    },\n    \"maxLength\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Max password length accepted\",\n      \"defaultValue\": {\n        \"value\": \"50\",\n        \"computed\": false\n      }\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Placeholder displayed when no password is entered\"\n    },\n    \"showVisibilityToggle\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Set to true to show the toggle for displaying the currently entered password\",\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      }\n    },\n    \"quality\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Display password quality visually via ProgressBar, accepts a number between 0 and 100\"\n    },\n    \"error\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Validation error to display\"\n    }\n  },\n  \"code\": \"import React from 'react';\\r\\nimport PropTypes from 'prop-types';\\r\\nimport ProgressBar from '../ProgressBar';\\r\\nimport EyeIcon from '../EyeIcon';\\r\\nimport TextInput from '../TextInput';\\r\\n\\r\\n/** Password input with integrated label, quality tips, and show password toggle. */\\r\\nclass PasswordInput extends React.Component {\\r\\n  constructor(props) {\\r\\n    super(props);\\r\\n    this.state = {\\r\\n      showPassword: false\\r\\n    }\\r\\n  }\\r\\n\\r\\n  toggleShowPassword = event => {\\r\\n    this.setState(prevState => {\\r\\n      return { showPassword: !prevState.showPassword };\\r\\n    });\\r\\n    if (event) event.preventDefault();\\r\\n  }\\r\\n\\r\\n  render() {\\r\\n    const { htmlId, value, label, error, onChange, placeholder, maxLength, showVisibilityToggle, quality, ...props } = this.props;\\r\\n    const { showPassword } = this.state;\\r\\n\\r\\n    return (\\r\\n      <TextInput\\r\\n        htmlId={htmlId}\\r\\n        label={label}\\r\\n        placeholder={placeholder}\\r\\n        type={showPassword ? 'text' : 'password'}\\r\\n        onChange={onChange}\\r\\n        value={value}\\r\\n        maxLength={maxLength}\\r\\n        error={error}\\r\\n        required\\r\\n        {...props}>\\r\\n        {\\r\\n          showVisibilityToggle &&\\r\\n          <a\\r\\n            href=\\\"!#\\\"\\r\\n            onClick={this.toggleShowPassword}\\r\\n            style={{ marginLeft: 5 }}>\\r\\n            <EyeIcon />\\r\\n          </a>\\r\\n        }\\r\\n        {\\r\\n          value.length > 0 && quality && <ProgressBar percent={quality} width={130} />\\r\\n        }\\r\\n      </TextInput>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\nPasswordInput.propTypes = {\\r\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\r\\n  htmlId: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\\r\\n  name: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Password value */\\r\\n  value: PropTypes.any,\\r\\n\\r\\n  /** Input label */\\r\\n  label: PropTypes.string,\\r\\n\\r\\n  /** Function called when password input value changes */\\r\\n  onChange: PropTypes.func.isRequired,\\r\\n\\r\\n  /** Max password length accepted */\\r\\n  maxLength: PropTypes.number,\\r\\n\\r\\n  /** Placeholder displayed when no password is entered */\\r\\n  placeholder: PropTypes.string,\\r\\n\\r\\n  /** Set to true to show the toggle for displaying the currently entered password */\\r\\n  showVisibilityToggle: PropTypes.bool,\\r\\n\\r\\n  /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\\r\\n  quality: PropTypes.number,\\r\\n\\r\\n  /** Validation error to display */\\r\\n  error: PropTypes.string\\r\\n};\\r\\n\\r\\nPasswordInput.defaultProps = {\\r\\n  maxLength: 50,\\r\\n  showVisibilityToggle: false,\\r\\n  label: 'Password'\\r\\n};\\r\\n\\r\\nexport default PasswordInput;\",\n  \"examples\": [{\n    \"name\": \"ExampleAllFeatures\",\n    \"description\": \"\",\n    \"code\": \"import React from 'react';\\r\\nimport PasswordInput from 'ps-react/PasswordInput'\\r\\n\\r\\nclass ExampleAllFeatures extends React.Component {\\r\\n    constructor(props){\\r\\n        super(props);\\r\\n\\r\\n        this.state = {\\r\\n            password: ''\\r\\n        };\\r\\n    }\\r\\n\\r\\n    getQuality() {\\r\\n        const length = this.state.password.length;\\r\\n        return length > 10 ? 100: length * 10;\\r\\n    }\\r\\n\\r\\n    render() {\\r\\n        return (\\r\\n            <div>\\r\\n                <PasswordInput \\r\\n                    htmlId=\\\"password-input-example-all-features\\\"\\r\\n                    name=\\\"password\\\"\\r\\n                    onChange={ event => this.setState ({ password: event.target.value})}\\r\\n                    value={this.state.password}\\r\\n                    minLength={8}\\r\\n                    placeholder=\\\"Enter Password\\\"\\r\\n                    showVisibilityToggle\\r\\n                    quality={this.getQuality()}\\r\\n                    {...this.props} \\r\\n                />\\r\\n            </div>\\r\\n        )\\r\\n    }\\r\\n}\\r\\n\\r\\nexport default ExampleAllFeatures;\"\n  }, {\n    \"name\": \"ExampleWithOutEye\",\n    \"description\": \"\",\n    \"code\": \"import React from 'react';\\r\\nimport PasswordInput from 'ps-react/PasswordInput'\\r\\n\\r\\nclass ExampleWithOutEye extends React.Component {\\r\\n    constructor(props){\\r\\n        super(props);\\r\\n\\r\\n        this.state = {\\r\\n            password: ''\\r\\n        };\\r\\n    }\\r\\n\\r\\n    getQuality() {\\r\\n        const length = this.state.password.length;\\r\\n        return length > 10 ? 100: length * 10;\\r\\n    }\\r\\n\\r\\n    render() {\\r\\n        return (\\r\\n            <div>\\r\\n                <PasswordInput \\r\\n                    htmlId=\\\"password-input-example-all-features\\\"\\r\\n                    name=\\\"password\\\"\\r\\n                    onChange={ event => this.setState ({ password: event.target.value})}\\r\\n                    value={this.state.password}\\r\\n                    minLength={8}\\r\\n                    placeholder=\\\"Enter Password\\\"\\r\\n                    quality={this.getQuality()}\\r\\n                    {...this.props} \\r\\n                />\\r\\n            </div>\\r\\n        )\\r\\n    }\\r\\n}\\r\\n\\r\\nexport default ExampleWithOutEye;\"\n  }]\n}, {\n  \"name\": \"ProgressBar\",\n  \"description\": \"\",\n  \"props\": {\n    \"percent\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": true,\n      \"description\": \"Percent of progress completed\"\n    },\n    \"width\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": true,\n      \"description\": \"Bar width\"\n    },\n    \"height\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Bar height\",\n      \"defaultValue\": {\n        \"value\": \"5\",\n        \"computed\": false\n      }\n    }\n  },\n  \"code\": \"import React from \\\"react\\\";\\r\\nimport PropTypes from \\\"prop-types\\\";\\r\\n\\r\\nclass ProgressBar extends React.Component {\\r\\n  getColor = percent => {\\r\\n    if (this.props.percent === 100) return \\\"green\\\";\\r\\n    return this.props.percent > 50 ? \\\"lightgreen\\\" : \\\"red\\\";\\r\\n  };\\r\\n\\r\\n  getWidthAsPercentOfTotalWidth = () => {\\r\\n    return parseInt(this.props.width * (this.props.percent / 100), 10);\\r\\n  };\\r\\n\\r\\n  render() {\\r\\n    const { percent, width, height } = this.props;\\r\\n    return (\\r\\n      <div style={{ border: \\\"solid 1px lightgray\\\", width: width }}>\\r\\n        <div\\r\\n          style={{\\r\\n            width: this.getWidthAsPercentOfTotalWidth(),\\r\\n            height,\\r\\n            backgroundColor: this.getColor(percent)\\r\\n          }}\\r\\n        />\\r\\n      </div>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\nProgressBar.propTypes = {\\r\\n  /** Percent of progress completed */\\r\\n  percent: PropTypes.number.isRequired,\\r\\n\\r\\n  /** Bar width */\\r\\n  width: PropTypes.number.isRequired,\\r\\n\\r\\n  /** Bar height */\\r\\n  height: PropTypes.number\\r\\n};\\r\\n\\r\\nProgressBar.defaultProps = {\\r\\n  height: 5\\r\\n};\\r\\n\\r\\nexport default ProgressBar;\\r\\n\",\n  \"examples\": [{\n    \"name\": \"Example100Percent\",\n    \"description\": \"10% progress\",\n    \"code\": \"import React from 'react';\\r\\nimport ProgressBar from 'ps-react/ProgressBar';\\r\\n\\r\\n/** 10% progress */\\r\\nexport default function Example100Percent(){\\r\\n    return <ProgressBar percent={100} width={150} height={20}/>\\r\\n}\"\n  }, {\n    \"name\": \"Example10Percent\",\n    \"description\": \"10% progress\",\n    \"code\": \"import React from 'react';\\r\\nimport ProgressBar from 'ps-react/ProgressBar';\\r\\n\\r\\n/** 10% progress */\\r\\nexport default function Example10Percent(){\\r\\n    return <ProgressBar percent={10} width={150}/>\\r\\n}\"\n  }, {\n    \"name\": \"Example70Percent\",\n    \"description\": \"10% progress\",\n    \"code\": \"import React from 'react';\\r\\nimport ProgressBar from 'ps-react/ProgressBar';\\r\\n\\r\\n/** 10% progress */\\r\\nexport default function Example70Percent(){\\r\\n    return <ProgressBar percent={70} width={150}/>\\r\\n}\"\n  }]\n}, {\n  \"name\": \"RegistrationForm\",\n  \"description\": \"Registration form with built-in validation.\",\n  \"props\": {\n    \"confirmationMessage\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Message displayed upon successful submission\",\n      \"defaultValue\": {\n        \"value\": \"\\\"Thanks for registering!\\\"\",\n        \"computed\": false\n      }\n    },\n    \"onSubmit\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Called when form is submitted\"\n    },\n    \"minPasswordLength\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Minimum password length\",\n      \"defaultValue\": {\n        \"value\": \"8\",\n        \"computed\": false\n      }\n    }\n  },\n  \"code\": \"import React from 'react';\\r\\nimport PropTypes from 'prop-types';\\r\\nimport TextInput from '../TextInput';\\r\\nimport PasswordInput from '../PasswordInput';\\r\\n\\r\\n/** Registration form with built-in validation. */\\r\\nclass RegistrationForm extends React.Component{\\r\\n    constructor(props) {\\r\\n        super(props);\\r\\n        \\r\\n        this.state = {\\r\\n            user: {\\r\\n                email: '',\\r\\n                password: ''\\r\\n            },\\r\\n            errors: {},\\r\\n            submitted: false,\\r\\n        };\\r\\n    }\\r\\n\\r\\n    onChange = (event) => {\\r\\n        const user = this.state.user;\\r\\n        user[event.target.name] = event.target.value;\\r\\n        this.setState({user});\\r\\n    }\\r\\n\\r\\n    passwordQuality(password){\\r\\n        if(!password) return null;\\r\\n        if(password.length >= this.props.minPasswordLength) return 100;\\r\\n        const percentOfMinLength = parseInt(password.length/this.props.minPasswordLength * 100, 10);\\r\\n        return percentOfMinLength;\\r\\n    }\\r\\n\\r\\n    validate({email, password}){\\r\\n        const errors = {};\\r\\n        const {minPasswordLength} = this.props;\\r\\n\\r\\n        if(!email) errors.email = 'Email required.';\\r\\n        if(password.length < minPasswordLength) errors.password = `Password must be at list ${minPasswordLength} charaters.`;\\r\\n\\r\\n        this.setState({errors});\\r\\n        const formIsValid = Object.getOwnPropertyNames(errors).length ===0;\\r\\n        return formIsValid;\\r\\n    }\\r\\n\\r\\n    onSubmit = () => {\\r\\n        const {user} = this.state;\\r\\n        const formIsValid = this.validate(user);\\r\\n        if(formIsValid){\\r\\n            this.props.onSubmit(user);\\r\\n            this.setState({submitedd:true});\\r\\n        }\\r\\n    }\\r\\n\\r\\n    render(){\\r\\n        const {errors, submitted} = this.state;\\r\\n        const {email, password} = this.state.user;\\r\\n\\r\\n        return (\\r\\n            submitted ?\\r\\n            <h2>{this.props.confirmationMessage}</h2> :\\r\\n            <div>\\r\\n                <TextInput \\r\\n                    htmlId = \\\"registration-form-email\\\"\\r\\n                    name = \\\"email\\\"\\r\\n                    onChange={this.onChange}\\r\\n                    label = \\\"Email\\\"\\r\\n                    value = {email}\\r\\n                    errors = {errors.email}\\r\\n                    required\\r\\n                />\\r\\n\\r\\n                <PasswordInput \\r\\n                    htmlId = \\\"registration-form-password\\\"\\r\\n                    name = \\\"password\\\"\\r\\n                    value = {password}\\r\\n                    onChange = {this.onChange}\\r\\n                    quality={this.passwordQuality(password)}\\r\\n                    showVisibilityToggle\\r\\n                    maxLength={50}\\r\\n                    error={errors.password}\\r\\n                />\\r\\n                <inpute type=\\\"submit\\\" value=\\\"Register\\\" onClick={this.Submit} />\\r\\n            </div>\\r\\n        )\\r\\n\\r\\n    }\\r\\n}\\r\\n\\r\\nRegistrationForm.propTypes = {\\r\\n    /** Message displayed upon successful submission */\\r\\n    confirmationMessage: PropTypes.string,\\r\\n  \\r\\n    /** Called when form is submitted */\\r\\n    onSubmit: PropTypes.func.isRequired,\\r\\n  \\r\\n    /** Minimum password length */\\r\\n    minPasswordLength: PropTypes.number\\r\\n  }\\r\\n  \\r\\n  RegistrationForm.defaultProps = {\\r\\n    confirmationMessage: \\\"Thanks for registering!\\\",\\r\\n    minPasswordLength: 8\\r\\n  };\\r\\n  \\r\\n  export default RegistrationForm;\",\n  \"examples\": [{\n    \"name\": \"ExampleRegistrationForm\",\n    \"description\": \"\",\n    \"code\": \"import React from 'react';\\r\\nimport RegistrationForm from 'ps-react/RegistrationForm';\\r\\n\\r\\nexport default class ExampleRegistrationForm extends React.Component {\\r\\n  onSubmit = (user) => {\\r\\n    console.log(user);\\r\\n  }\\r\\n\\r\\n  render() {\\r\\n    return <RegistrationForm onSubmit={this.onSubmit} />\\r\\n  }\\r\\n}\"\n  }]\n}, {\n  \"name\": \"TextInput\",\n  \"description\": \"\",\n  \"props\": {\n    \"htmlId\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input name. Recommend setting this to match object's property so a single change handler can be used.\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input label\"\n    },\n    \"type\": {\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"'text'\",\n          \"computed\": false\n        }, {\n          \"value\": \"'number'\",\n          \"computed\": false\n        }, {\n          \"value\": \"'password'\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"Input type\",\n      \"defaultValue\": {\n        \"value\": \"\\\"text\\\"\",\n        \"computed\": false\n      }\n    },\n    \"required\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Mark label with asterisk if set to true\",\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      }\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Function to call onChange\"\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Placeholder to display when empty\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"Value\"\n    },\n    \"error\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"String to display when error occurs\"\n    },\n    \"children\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"Child component to display next to the input\"\n    }\n  },\n  \"code\": \"import React from 'react';\\r\\nimport PropTypes from 'prop-types';\\r\\nimport Label from '../Label';\\r\\n\\r\\nfunction TextInput({htmlId, name, label, type=\\\"text\\\", required=false, onChange, placeholder, value, error, children, ...props}) {\\r\\nreturn (\\r\\n    <div  style={{marginBottom:16}} >\\r\\n        <Label htmlFor={htmlId} label={label} required={required} />\\r\\n        <input \\r\\n            id={htmlId}\\r\\n            type={type}\\r\\n            name={name}\\r\\n            placeholder={placeholder}\\r\\n            value={value}\\r\\n            onChange={onChange}\\r\\n            style={error && {border:'solid 1px red'}}\\r\\n            {...props}\\r\\n        />\\r\\n        {children}\\r\\n        {error && <div className=\\\"error\\\" style={{color: 'red'}}>{error}</div>}\\r\\n    </div>\\r\\n    );\\r\\n};\\r\\n\\r\\nTextInput.propTypes = {\\r\\n    /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\r\\n    htmlId: PropTypes.string.isRequired,\\r\\n  \\r\\n    /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\r\\n    name: PropTypes.string.isRequired,\\r\\n  \\r\\n    /** Input label */\\r\\n    label: PropTypes.string.isRequired,\\r\\n  \\r\\n    /** Input type */\\r\\n    type: PropTypes.oneOf(['text', 'number', 'password']),\\r\\n  \\r\\n    /** Mark label with asterisk if set to true */\\r\\n    required: PropTypes.bool,\\r\\n  \\r\\n    /** Function to call onChange */\\r\\n    onChange: PropTypes.func.isRequired,\\r\\n  \\r\\n    /** Placeholder to display when empty */\\r\\n    placeholder: PropTypes.string,\\r\\n  \\r\\n    /** Value */\\r\\n    value: PropTypes.any,\\r\\n  \\r\\n    /** String to display when error occurs */\\r\\n    error: PropTypes.string,\\r\\n  \\r\\n    /** Child component to display next to the input */\\r\\n    children: PropTypes.node\\r\\n  };\\r\\n  \\r\\n  export default TextInput;\",\n  \"examples\": [{\n    \"name\": \"ExampleError\",\n    \"description\": \"Required TextBox with Error\",\n    \"code\": \"import React from 'react';\\r\\nimport TextInput from 'ps-react/TextInput';\\r\\n\\r\\n/** Required TextBox with Error */\\r\\nexport default class ExampleError extends React.Component {\\r\\n    render() {\\r\\n        return (<TextInput\\r\\n                    htmlId=\\\"example-optional\\\"\\r\\n                    label=\\\"First Name\\\"\\r\\n                    name=\\\"First Name\\\"\\r\\n                    onChange= {() => {}}\\r\\n                    required\\r\\n                    error=\\\"First name is required.\\\"\\r\\n                />\\r\\n                )\\r\\n    }\\r\\n    \\r\\n}\\r\\n\"\n  }, {\n    \"name\": \"ExampleOptional\",\n    \"description\": \"Optional TextBox\",\n    \"code\": \"import React from 'react';\\r\\nimport TextInput from 'ps-react/TextInput';\\r\\n\\r\\n/** Optional TextBox */\\r\\nexport default class ExampleOptional extends React.Component {\\r\\n    render() {\\r\\n        return (<TextInput\\r\\n                    htmlId=\\\"example-optional\\\"\\r\\n                    label=\\\"First Name\\\"\\r\\n                    name=\\\"First Name\\\"\\r\\n                    onChange= {() => {}}\\r\\n                />\\r\\n                )\\r\\n    }\\r\\n    \\r\\n}\\r\\n\"\n  }]\n}];","import React from 'react'\r\nimport EyeIcon from 'ps-react/EyeIcon'\r\n\r\nexport default function EyeIconExample()\r\n{\r\n    return <EyeIcon />;\r\n}","import React from 'react';\r\nimport Label from 'ps-react/Label';\r\n\r\n/** Optional label */\r\nexport default function ExampleOptional(){\r\n    return <Label htmlFor=\"test\" label=\"test\" />\r\n}","import React from 'react';\r\nimport Label from 'ps-react/Label';\r\n\r\n/** Optional label */\r\nexport default function ExampleRequred(){\r\n    return <Label htmlFor=\"test\" label=\"test\" required/>\r\n}","import React from 'react';\r\nimport PasswordInput from 'ps-react/PasswordInput'\r\n\r\nclass ExampleAllFeatures extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            password: ''\r\n        };\r\n    }\r\n\r\n    getQuality() {\r\n        const length = this.state.password.length;\r\n        return length > 10 ? 100: length * 10;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <PasswordInput \r\n                    htmlId=\"password-input-example-all-features\"\r\n                    name=\"password\"\r\n                    onChange={ event => this.setState ({ password: event.target.value})}\r\n                    value={this.state.password}\r\n                    minLength={8}\r\n                    placeholder=\"Enter Password\"\r\n                    showVisibilityToggle\r\n                    quality={this.getQuality()}\r\n                    {...this.props} \r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ExampleAllFeatures;","import React from 'react';\r\nimport PasswordInput from 'ps-react/PasswordInput'\r\n\r\nclass ExampleWithOutEye extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            password: ''\r\n        };\r\n    }\r\n\r\n    getQuality() {\r\n        const length = this.state.password.length;\r\n        return length > 10 ? 100: length * 10;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <PasswordInput \r\n                    htmlId=\"password-input-example-all-features\"\r\n                    name=\"password\"\r\n                    onChange={ event => this.setState ({ password: event.target.value})}\r\n                    value={this.state.password}\r\n                    minLength={8}\r\n                    placeholder=\"Enter Password\"\r\n                    quality={this.getQuality()}\r\n                    {...this.props} \r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ExampleWithOutEye;","import React from 'react';\r\nimport ProgressBar from 'ps-react/ProgressBar';\r\n\r\n/** 10% progress */\r\nexport default function Example100Percent(){\r\n    return <ProgressBar percent={100} width={150} height={20}/>\r\n}","import React from 'react';\r\nimport ProgressBar from 'ps-react/ProgressBar';\r\n\r\n/** 10% progress */\r\nexport default function Example10Percent(){\r\n    return <ProgressBar percent={10} width={150}/>\r\n}","import React from 'react';\r\nimport ProgressBar from 'ps-react/ProgressBar';\r\n\r\n/** 10% progress */\r\nexport default function Example70Percent(){\r\n    return <ProgressBar percent={70} width={150}/>\r\n}","import React from 'react';\r\nimport TextInput from 'ps-react/TextInput';\r\n\r\n/** Required TextBox with Error */\r\nexport default class ExampleError extends React.Component {\r\n    render() {\r\n        return (<TextInput\r\n                    htmlId=\"example-optional\"\r\n                    label=\"First Name\"\r\n                    name=\"First Name\"\r\n                    onChange= {() => {}}\r\n                    required\r\n                    error=\"First name is required.\"\r\n                />\r\n                )\r\n    }\r\n    \r\n}\r\n","import React from 'react';\r\nimport TextInput from 'ps-react/TextInput';\r\n\r\n/** Optional TextBox */\r\nexport default class ExampleOptional extends React.Component {\r\n    render() {\r\n        return (<TextInput\r\n                    htmlId=\"example-optional\"\r\n                    label=\"First Name\"\r\n                    name=\"First Name\"\r\n                    onChange= {() => {}}\r\n                />\r\n                )\r\n    }\r\n    \r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/** A super lame component that says Hello with a custom message. */\r\nfunction HelloWorld({ message }) {\r\n  return <div>Hello {message}</div>;\r\n}\r\n\r\nHelloWorld.propTypes = {\r\n  /** Message to display */\r\n  message: PropTypes.string\r\n};\r\n\r\nHelloWorld.defaultProps = {\r\n  message: \"World\"\r\n};\r\n\r\nexport default HelloWorld;\r\n","import React from 'react';\r\nimport HelloWorld from 'ps-react/HelloWorld';\r\n\r\n/** Custom message */\r\nexport default function ExampleHelloWorld() {\r\n  return <HelloWorld message=\"Pluralsight viewers!\" />\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport TextInput from '../TextInput';\r\nimport PasswordInput from '../PasswordInput';\r\n\r\n/** Registration form with built-in validation. */\r\nclass RegistrationForm extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            user: {\r\n                email: '',\r\n                password: ''\r\n            },\r\n            errors: {},\r\n            submitted: false,\r\n        };\r\n    }\r\n\r\n    onChange = (event) => {\r\n        const user = this.state.user;\r\n        user[event.target.name] = event.target.value;\r\n        this.setState({user});\r\n    }\r\n\r\n    passwordQuality(password){\r\n        if(!password) return null;\r\n        if(password.length >= this.props.minPasswordLength) return 100;\r\n        const percentOfMinLength = parseInt(password.length/this.props.minPasswordLength * 100, 10);\r\n        return percentOfMinLength;\r\n    }\r\n\r\n    validate({email, password}){\r\n        const errors = {};\r\n        const {minPasswordLength} = this.props;\r\n\r\n        if(!email) errors.email = 'Email required.';\r\n        if(password.length < minPasswordLength) errors.password = `Password must be at list ${minPasswordLength} charaters.`;\r\n\r\n        this.setState({errors});\r\n        const formIsValid = Object.getOwnPropertyNames(errors).length ===0;\r\n        return formIsValid;\r\n    }\r\n\r\n    onSubmit = () => {\r\n        const {user} = this.state;\r\n        const formIsValid = this.validate(user);\r\n        if(formIsValid){\r\n            this.props.onSubmit(user);\r\n            this.setState({submitedd:true});\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const {errors, submitted} = this.state;\r\n        const {email, password} = this.state.user;\r\n\r\n        return (\r\n            submitted ?\r\n            <h2>{this.props.confirmationMessage}</h2> :\r\n            <div>\r\n                <TextInput \r\n                    htmlId = \"registration-form-email\"\r\n                    name = \"email\"\r\n                    onChange={this.onChange}\r\n                    label = \"Email\"\r\n                    value = {email}\r\n                    errors = {errors.email}\r\n                    required\r\n                />\r\n\r\n                <PasswordInput \r\n                    htmlId = \"registration-form-password\"\r\n                    name = \"password\"\r\n                    value = {password}\r\n                    onChange = {this.onChange}\r\n                    quality={this.passwordQuality(password)}\r\n                    showVisibilityToggle\r\n                    maxLength={50}\r\n                    error={errors.password}\r\n                />\r\n                <inpute type=\"submit\" value=\"Register\" onClick={this.Submit} />\r\n            </div>\r\n        )\r\n\r\n    }\r\n}\r\n\r\nRegistrationForm.propTypes = {\r\n    /** Message displayed upon successful submission */\r\n    confirmationMessage: PropTypes.string,\r\n  \r\n    /** Called when form is submitted */\r\n    onSubmit: PropTypes.func.isRequired,\r\n  \r\n    /** Minimum password length */\r\n    minPasswordLength: PropTypes.number\r\n  }\r\n  \r\n  RegistrationForm.defaultProps = {\r\n    confirmationMessage: \"Thanks for registering!\",\r\n    minPasswordLength: 8\r\n  };\r\n  \r\n  export default RegistrationForm;","import React from 'react';\r\nimport RegistrationForm from 'ps-react/RegistrationForm';\r\n\r\nexport default class ExampleRegistrationForm extends React.Component {\r\n  onSubmit = (user) => {\r\n    console.log(user);\r\n  }\r\n\r\n  render() {\r\n    return <RegistrationForm onSubmit={this.onSubmit} />\r\n  }\r\n}","var map = {\n\t\"./EyeIcon/Example\": 15,\n\t\"./EyeIcon/Example.js\": 15,\n\t\"./HelloWorld/ExampleHelloWorld\": 25,\n\t\"./HelloWorld/ExampleHelloWorld.js\": 25,\n\t\"./Label/ExampleOptional\": 16,\n\t\"./Label/ExampleOptional.js\": 16,\n\t\"./Label/ExampleRequired\": 17,\n\t\"./Label/ExampleRequired.js\": 17,\n\t\"./PasswordInput/ExampleAllFeatures\": 18,\n\t\"./PasswordInput/ExampleAllFeatures.js\": 18,\n\t\"./PasswordInput/ExampleWithOutEye\": 19,\n\t\"./PasswordInput/ExampleWithOutEye.js\": 19,\n\t\"./ProgressBar/Example100Percent\": 20,\n\t\"./ProgressBar/Example100Percent.js\": 20,\n\t\"./ProgressBar/Example10Percent\": 21,\n\t\"./ProgressBar/Example10Percent.js\": 21,\n\t\"./ProgressBar/Example70Percent\": 22,\n\t\"./ProgressBar/Example70Percent.js\": 22,\n\t\"./RegistrationForm/ExampleRegistrationForm\": 26,\n\t\"./RegistrationForm/ExampleRegistrationForm.js\": 26,\n\t\"./TextInput/ExampleError\": 23,\n\t\"./TextInput/ExampleError.js\": 23,\n\t\"./TextInput/ExampleOptional\": 24,\n\t\"./TextInput/ExampleOptional.js\": 24\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 34;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Navigation = ({components}) => {\r\n  return (\r\n    <ul className=\"navigation\">\r\n      {\r\n        components.map( name => {\r\n          return (\r\n            <li key={name}>\r\n              <a href={`#${name}`}>{name}</a>\r\n            </li>\r\n          )\r\n        })\r\n      }\r\n    </ul>\r\n  )\r\n}\r\n\r\nNavigation.propTypes = {\r\n  components: PropTypes.array.isRequired\r\n};\r\n\r\nexport default Navigation;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport hljs from 'highlight.js/lib/highlight'\r\nimport javascript from 'highlight.js/lib/languages/javascript'\r\n\r\n// This way is easy, but adds 170K gzipped to bundle since all langs are included.\r\n// import Highlight from 'react-highlight';\r\n\r\nclass CodeExample extends React.Component {\r\n  componentDidMount() {\r\n    hljs.registerLanguage('javascript', javascript);\r\n    hljs.highlightBlock(this.element);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <pre ref={ref => { this.element = ref }}>\r\n        <code>\r\n          {this.props.children}\r\n        </code>\r\n      </pre>\r\n    )\r\n  }\r\n}\r\n\r\nCodeExample.propTypes = {\r\n  children: PropTypes.string.isRequired\r\n}\r\n\r\nexport default CodeExample;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport CodeExample from './CodeExample';\r\n\r\nclass Example extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { showCode: false };\r\n  }\r\n\r\n  toggleCode = event => {\r\n    event.preventDefault();\r\n    this.setState(prevState => {\r\n      return {showCode: !prevState.showCode};\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {showCode} = this.state;\r\n    const {code, description, name} = this.props.example;\r\n    // Must use CommonJS require to dynamically require because ES Modules must be statically analyzable.\r\n    const ExampleComponent = require(`./examples/${this.props.componentName}/${name}`).default;\r\n    return (\r\n      <div className=\"example\">\r\n        {description && <h4>{description}</h4> }\r\n\r\n        <ExampleComponent />\r\n\r\n        <p>\r\n          <a href=\"!#\" onClick={this.toggleCode}>\r\n            {showCode ? \"Hide\" : \"Show\"} Code\r\n          </a>\r\n        </p>\r\n\r\n        {showCode && <CodeExample>{code}</CodeExample>}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nExample.propTypes = {\r\n  example: PropTypes.object.isRequired,\r\n  componentName: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Example;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Props = ({ props }) => {\r\n  return (\r\n    <table className=\"props\">\r\n      <thead>\r\n        <tr>\r\n          <th>Name</th>\r\n          <th>Description</th>\r\n          <th>Type</th>\r\n          <th>Default</th>\r\n          <th>Required</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {Object.keys(props).map(key => {\r\n          return (\r\n            <tr key={key}>\r\n              <td>{key}</td>\r\n              <td>{props[key].description}</td>\r\n              <td>{props[key].type.name}</td>\r\n              <td>\r\n                {props[key].defaultValue && props[key].defaultValue.value}\r\n              </td>\r\n              <td>{props[key].required && \"X\"}</td>\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nProps.propTypes = {\r\n  props: PropTypes.object.isRequired\r\n};\r\n\r\nexport default Props;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Example from './Example';\r\nimport Props from './Props';\r\n\r\nconst ComponentPage = ({component}) => {\r\n  const {name, description, props, examples} = component;\r\n\r\n  return (\r\n    <div className=\"componentpage\">\r\n      <h2>{name}</h2>\r\n      <p>{description}</p>\r\n\r\n      <h3>Example{examples.length > 1 && \"s\"}</h3>\r\n      {\r\n        examples.length > 0 ?\r\n        examples.map( example => <Example key={example.code} example={example} componentName={name} /> ) :\r\n        \"No examples exist.\"\r\n      }\r\n\r\n      <h3>Props</h3>\r\n      {\r\n        props ?\r\n        <Props props={props} /> :\r\n        \"This component accepts no props.\"\r\n      }\r\n    </div>\r\n  )\r\n};\r\n\r\nComponentPage.propTypes = {\r\n  component: PropTypes.object.isRequired\r\n};\r\n\r\nexport default ComponentPage;","import React from 'react';\r\nimport Navigation from './Navigation';\r\nimport ComponentPage from './ComponentPage';\r\nimport componentData from '../../config/componentData';\r\n\r\nexport default class Docs extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      route: window.location.hash.substr(1)\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener('hashchange', () => {\r\n      this.setState({route: window.location.hash.substr(1)})\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const {route} = this.state;\r\n    const component = route ? componentData.filter( component => component.name === route)[0] : componentData[0];\r\n\r\n    return (\r\n      <div>\r\n        <Navigation components={componentData.map(component => component.name)} />\r\n        <ComponentPage component={component} />\r\n      </div>\r\n    )\r\n  }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Docs from './docs/Docs';\nimport registerServiceWorker from './registerServiceWorker';\nimport './index.css';\nimport '../node_modules/highlight.js/styles/ocean.css';\n\nReactDOM.render(<Docs />, document.getElementById('root'));\nregisterServiceWorker();\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nexport default function register() {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n        navigator.serviceWorker\r\n          .register(swUrl)\r\n          .then(registration => {\r\n            registration.onupdatefound = () => {\r\n              const installingWorker = registration.installing;\r\n              installingWorker.onstatechange = () => {\r\n                if (installingWorker.state === 'installed') {\r\n                  if (navigator.serviceWorker.controller) {\r\n                    // At this point, the old content will have been purged and\r\n                    // the fresh content will have been added to the cache.\r\n                    // It's the perfect time to display a \"New content is\r\n                    // available; please refresh.\" message in your web app.\r\n                    console.log('New content is available; please refresh.');\r\n                  } else {\r\n                    // At this point, everything has been precached.\r\n                    // It's the perfect time to display a\r\n                    // \"Content is cached for offline use.\" message.\r\n                    console.log('Content is cached for offline use.');\r\n                  }\r\n                }\r\n              };\r\n            };\r\n          })\r\n          .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n          });\r\n      });\r\n    }\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister();\r\n      });\r\n    }\r\n  }"],"sourceRoot":""}